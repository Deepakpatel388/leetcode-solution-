class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
//         int n = nums1.length;
//         int m = nums2.length;
        
//         int[] arr = new int[n + m];
//         int i=0, j=0, k=0;
        
//         while(i < n && j < m){
            
//             if(nums1[i] < nums2[j]){
//                 arr[k] =nums1[i];
//                 i++;
//                 k++;
//             }
//             else{
//                 arr[k] = nums2[j];
//                 j++;
//                 k++;
//             }
//         }
//         while(i < n){
//             arr[k++] = nums1[i++];
//         }
//         while(j < m){
//             arr[k++] = nums2[j++];
//         }
//         if((n + m)%2 == 1){
//             return arr[((n + m + 1)/2) - 1];
//         }
//         else{
//              return ((double)arr[((n + m + 1)/2) - 1] + (double)arr[(n + m)/2])/2.0;
//         }
        
        if(nums1.length > nums2.length){
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int n1 = nums1.length;
        int n2 = nums2.length;
        int low=0; int high = n1;
        
        while(low <= high){
            int cut1 = low + (high - low)/2;
            int cut2 = (n1 + n2)/2 - cut1;
            
            int l1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];
            int l2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];
            int r1 = (cut1 == n1) ? Integer.MAX_VALUE : nums1[cut1];
            int r2 = (cut2 == n2) ? Integer.MAX_VALUE : nums2[cut2];
            
            if(l1 > r2){
                high = cut1 -1;
            }
            else if(l2 > r1){
                low = cut1 + 1;
            }
            else{
                if((n1+n2) % 2 == 0){
                    return (double)(Math.max(l1,l2) + Math.min(r1,r2)) /2;
                }
                else{
                    return (double)(Math.min(r1,r2));
                }
            }

        }
      return 0.0;  
    }
}
